#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
	# Function prologue. Do not modify.
	#
	#Idea -- mmmovl
	#Idea -- use register as ofset
	#Idea -- rmmovl_4
	#Idea -- reverse condition in while so that len counts up
	#   and use len as in address computations index. (mem, len, 4)
	#
ncopy:	
    pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 12(%ebp),%ecx	# dst
	mrmovl 16(%ebp),%edx	# len

	# Loop header
	xorl %esi,%esi		# count = 0;
	#andl %edx,%edx		# len <= 0?
	#jle Done		# if so, goto Done:
	jmp Middle

	# Loop body.
Loop:	
    #mrmovl (%ebx), %eax	# read val from src...
	rmmovl %eax, (%ecx)	# ...and store it to dst
	andl %eax, %eax		# val <= 0?
	jg Ppos		# if so, goto Npos:
	#irmovl $1, %edi
	#addl %edi, %esi		# count++
	iaddl $-1, %esi
Ppos:	
	iaddl $1, %esi
    #irmovl $1, %edi
	#subl %edi, %edx		# len--
	iaddl $-1, %edx
	#irmovl $4, %edi
	#addl %edi, %ebx		# src++
	#addl %edi, %ecx		# dst++
	iaddl $4, %ebx
	iaddl $4, %ecx
Middle:
	andl %edx,%edx		# len > 0?
    mrmovl (%ebx), %eax	# read val from src...
	jg Loop			# if so, goto Loop:

	# Function epilogue. Do not modify.
Done:	
    rrmovl %esi, %eax
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
#/* $end ncopy-ys */
